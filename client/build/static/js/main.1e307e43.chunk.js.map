{"version":3,"sources":["utils/https.js","pages/Books.js","App.js","serviceWorker.js","index.js"],"names":["postOptions","hostname","path","method","headers","Content-Type","postData","querystring","stringify","title","authors","https","getBooks","url","Promise","resolve","reject","get","response","statusCode","data","on","chunk","Error","err","saveBook","request","console","log","concat","write","end","Books","state","books","whatever","loadBooks","API","then","res","catch","this","react_default","a","createElement","Component","App","pages_Books","Boolean","window","location","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAGMA,EAAc,CAClBC,SAAU,gCACVC,KAAM,aACNC,OAAQ,OACRC,QAAS,CACDC,eAAgB,sCAIpBC,SAAWC,EAAYC,UAAU,CACrCC,MAAS,qBACTC,QAAW,mBAGEC,EAAA,CACbC,SAAU,SAACC,GACT,OAAO,IAAIC,QAAQ,SAACC,EAASC,GACXL,IAAMM,IAAIJ,EAAK,SAACK,GAC9B,GAAGA,EAASC,YAAc,KAAOD,EAASC,WAAa,IAAK,CAC1D,IAAIC,EAAO,GACXF,EAASG,GAAG,OAAQ,SAACC,GAAD,OAAWF,GAAQE,IACvCJ,EAASG,GAAG,MAAO,kBAAMN,EAAQK,UAEjCJ,EAAO,IAAIO,MAAML,EAASC,eAGtBE,GAAG,QAAS,SAACG,GAAD,OAASR,EAAOQ,QAGxCC,SAAU,WACR,OAAO,IAAIX,QAAQ,SAACC,EAASC,GAC3B,IAAMU,EAAUf,IAAMe,QAAQ1B,EAAa,SAACkB,GAC1CQ,EAAQL,GAAG,OAAQ,SAACC,GAClBK,QAAQC,IAAR,SAAAC,OAAqBP,MAEvBI,EAAQL,GAAG,MAAO,WAChBM,QAAQC,IAAI,6BACZb,EAAQ,cAGZW,EAAQI,MAAMxB,GACdoB,EAAQK,MACRL,EAAQL,GAAG,QAAS,SAACG,GAAD,OAASR,EAAOQ,SChB3BQ,6MAzBbC,MAAQ,CACNC,MAAO,GACPC,SAAU,MAOZC,UAAY,WAEVC,EAAIZ,WACDa,KAAK,SAAAC,GAAG,OAAIZ,QAAQC,IAAI,cACxBY,MAAM,SAAAhB,GAAG,OAAIG,QAAQC,IAAIJ,yFAP5BiB,KAAKL,6CAWL,OACEM,EAAAC,EAAAC,cAAA,WACGH,KAAKR,MAAME,iBApBAU,aCQLC,mLANX,OACEJ,EAAAC,EAAAC,cAACG,EAAD,aAHYF,aCSEG,QACW,cAA7BC,OAAOC,SAASjD,UAEe,UAA7BgD,OAAOC,SAASjD,UAEhBgD,OAAOC,SAASjD,SAASkD,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.1e307e43.chunk.js","sourcesContent":["import https from \"https\";\r\nimport querystring from \"querystring\";\r\n\r\nconst postOptions = {\r\n  hostname: \"wma-googlebooks.herokuapp.com\",\r\n  path: \"/api/books\",\r\n  method: \"POST\",\r\n  headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded'\r\n  }\r\n}\r\n\r\nconst postData = querystring.stringify({\r\n  \"title\": \"Catcher in the Rye\",\r\n  \"authors\": \"J. D. Salinger\"\r\n})\r\n\r\nexport default {\r\n  getBooks: (url) => {\r\n    return new Promise((resolve, reject) => {\r\n      const request = https.get(url, (response) => {\r\n        if(response.statusCode >= 200 && response.statusCode < 300) {\r\n          let data = '';\r\n          response.on('data', (chunk) => data += chunk );\r\n          response.on('end', () => resolve(data));\r\n        } else {\r\n          reject(new Error(response.statusCode));\r\n        }\r\n      });\r\n      request.on('error', (err) => reject(err));\r\n    });\r\n  },\r\n  saveBook: () => {\r\n    return new Promise((resolve, reject) => {\r\n      const request = https.request(postOptions, (response) => {\r\n        request.on('data', (chunk) => {\r\n          console.log(`BODY: ${chunk}`);\r\n        });\r\n        request.on('end', () => {\r\n          console.log('No more data in response.');\r\n          resolve('FINISH');\r\n        })\r\n      });\r\n      request.write(postData);\r\n      request.end();\r\n      request.on('error', (err) => reject(err));\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport API from \"../utils/https\";\r\n\r\nclass Books extends Component {\r\n  state = {\r\n    books: [],\r\n    whatever: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadBooks();\r\n  }\r\n\r\n  loadBooks = () => {\r\n    // API.getBooks('/api/books')\r\n    API.saveBook()\r\n      .then(res => console.log(\"Bad Wolf\"))\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.whatever}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Books;\r\n","import React, { Component } from 'react';\nimport Books from './pages/Books.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <Books />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}