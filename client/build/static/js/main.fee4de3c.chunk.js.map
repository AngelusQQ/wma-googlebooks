{"version":3,"sources":["utils/https.js","pages/Books.js","App.js","serviceWorker.js","index.js"],"names":["postOptions","hostname","path","method","headers","Content-Type","https","searchBooks","parameters","query","includes","trim","split","join","console","log","url","Promise","resolve","reject","get","response","statusCode","data","on","chunk","JSON","parse","Error","err","getBooks","saveBook","title","authors","description","postData","querystring","stringify","request","write","end","Books","state","books","search","loadBooks","API","then","catch","saveBooks","handleInputChange","event","_event$target","target","name","value","_this","setState","Object","defineProperty","submitSearch","preventDefault","items","this","react_default","a","createElement","onChange","disabled","onClick","Component","App","pages_Books","Boolean","window","location","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fee4de3c.chunk.js","sourcesContent":["import https from \"https\";\r\nimport querystring from \"querystring\";\r\n\r\nconst postOptions = {\r\n  hostname: \"wma-googlebooks.herokuapp.com\",\r\n  path: \"/api/books\",\r\n  method: \"POST\",\r\n  headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded'\r\n  }\r\n}\r\n//\r\n// const postData = querystring.stringify({\r\n//   \"title\": \"Catcher in the Rye\",\r\n//   \"authors\": \"J. D. Salinger\"\r\n// })\r\n\r\nexport default {\r\n  //GET REQUEST (Google Search - Books)\r\n  //https://www.googleapis.com/books/v1/volumes?q=flowers+inauthor:keyes\r\n  searchBooks: (parameters) => {\r\n\r\n    const query = parameters.includes(\" \") ? parameters.trim().split(\" \").join(\"+\")\r\n    : parameters.trim();\r\n    console.log(\"SEARCH TERM:\", query);\r\n\r\n    const url = 'https://www.googleapis.com/books/v1/volumes?q=' + query;\r\n    return new Promise((resolve, reject) => {\r\n      const request = https.get(url, (response) => {\r\n        console.log(\"RESPONSE CODE\", response.statusCode);\r\n        if(response.statusCode >= 200 && response.statusCode < 300) {\r\n          let data = '';\r\n          response.on('data', (chunk) => data += chunk);\r\n          response.on('end', () => resolve(JSON.parse(data)));\r\n        } else {\r\n          reject(new Error(response.statusCode));\r\n        }\r\n      })\r\n      request.on('error', (err) => reject(err));\r\n    });\r\n  },\r\n  //GET REQUEST (loading ALL books from the database)\r\n  getBooks: (url) => {\r\n    return new Promise((resolve, reject) => {\r\n      const request = https.get(url, (response) => {\r\n        if(response.statusCode >= 200 && response.statusCode < 300) {\r\n          let data = '';\r\n          response.on('data', (chunk) => data += chunk );\r\n          response.on('end', () => resolve(JSON.parse(data)));\r\n        } else {\r\n          reject(new Error(response.statusCode));\r\n        }\r\n      });\r\n      request.on('error', (err) => reject(err));\r\n    });\r\n  },\r\n  //POST REQUEST (adding a book to database)\r\n  saveBook: (title, authors, description) => {\r\n    const postData = querystring.stringify({\r\n      \"title\": title || \"No Title Provided\",\r\n      \"authors\": authors || \"No Author Provided\",\r\n      \"description\": description || \"No Description Provided\"\r\n    });\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = https.request(postOptions, (response) => {\r\n        let data = '';\r\n        response.on('data', (chunk) => {\r\n          data += chunk;\r\n        });\r\n        response.on('end', () => {\r\n          resolve(data);\r\n        })\r\n      });\r\n      request.write(postData);\r\n      request.end();\r\n      request.on('error', (err) => reject(err));\r\n    });\r\n  }\r\n  //END OF EXPORT\r\n}\r\n","import React, { Component } from 'react';\r\nimport API from \"../utils/https\";\r\n\r\nclass Books extends Component {\r\n  state = {\r\n    books: [],\r\n    search: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadBooks();\r\n  }\r\n\r\n  loadBooks = () => {\r\n    API.getBooks('/api/books')\r\n      .then(response => {\r\n        console.log(typeof response);\r\n        console.log(response);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  saveBooks = () => {\r\n    API.saveBook()\r\n      .then(response => console.log(response))\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  submitSearch = event => {\r\n    event.preventDefault();\r\n\r\n    console.log(this.state.search);\r\n    API.searchBooks(this.state.search)\r\n      .then(response => {\r\n        console.log(\"GOOGLE\");\r\n        console.log(typeof response);\r\n        console.log(response);\r\n        console.log(response.items);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <input value={this.state.search} onChange={this.handleInputChange} name=\"search\"></input>\r\n          <button disabled={!(this.state.search)} onClick={this.submitSearch}></button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Books;\r\n","import React, { Component } from 'react';\nimport Books from './pages/Books.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <Books />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}